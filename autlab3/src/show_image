#!/usr/bin/env python3

import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

# Variables globales
bridge = CvBridge()
latest_image = None  # Inicialmente no hay imagen

def image_callback(msg):
    global latest_image
    try:
        latest_image = bridge.imgmsg_to_cv2(msg, "bgr8")
    except Exception as e:
        rospy.logerr("❌ Error al convertir imagen: {}".format(e))
        latest_image = None

if __name__ == '__main__':
    rospy.init_node('haar_detector_node')

    # Suscripción al tópico de cámara
    topic_name = "/camera/rgb/image_raw"
    rospy.Subscriber(topic_name, Image, image_callback)

    # Cargar clasificador Haar cascade
    cascade_path = '/home/ctorres/lab_ws/src/autlabs/autlab2/coca/coca/classifier/cascade.xml'
    detector = cv2.CascadeClassifier(cascade_path)

    if detector.empty():
        rospy.logerr("❌ No se pudo cargar el clasificador: {}".format(cascade_path))
        exit()
    else:
        rospy.loginfo("✅ Clasificador cargado correctamente")

    rate = rospy.Rate(10)

    while not rospy.is_shutdown():
        if latest_image is None or latest_image.shape[0] < 10:
            rospy.logwarn_throttle(5, "⚠️ Aún no se recibe una imagen válida...")
            rate.sleep()
            continue

        try:
            frame = latest_image.copy()
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

            detections = detector.detectMultiScale(
                gray,
                scaleFactor=1.3,
                minNeighbors=10
            )

            for (x, y, w, h) in detections:
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(frame, 'Majin Boo', (x, y - 10), 2, 0.7, (0, 255, 0), 2, cv2.LINE_AA)

            cv2.imshow("Detección Haar", frame)
            cv2.waitKey(1)

        except Exception as e:
            rospy.logerr_throttle(5, "❌ Error durante la detección o visualización: {}".format(e))

        rate.sleep()

    # Al salir del bucle ROS
    cv2.destroyAllWindows()
    cv2.waitKey(1)

